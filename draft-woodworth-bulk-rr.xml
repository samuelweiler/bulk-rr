<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2308 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY RFC2317 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2317.xml">
<!ENTITY RFC3597 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3597.xml">
<!ENTITY RFC4033 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-woodworth-bulk-rr-07" category="std" updates="2308, 4033, 4034, 4035">

  <front>
    <title abbrev="BULK RR">BULK DNS Resource Records</title>

    <author initials="J." surname="Woodworth" fullname="John Woodworth">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>4250 N Fairfax Dr</street>
          <city>Arlington</city>
          <code>VA 22203</code>
          <country>USA</country>
        </postal>
        <email>John.Woodworth@CenturyLink.com</email>
      </address>
    </author>
    <author initials="D." surname="Ballew" fullname="Dean Ballew">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Dean.Ballew@CenturyLink.com</email>
      </address>
    </author>
    <author initials="S." surname="Bindinganaveli Raghavan" fullname="Shashwath Bindinganaveli Raghavan">
      <organization>Hughes Network Systems</organization>
      <address>
        <postal>
          <street>11717 Exploration Lane</street>
          <city>Germantown</city>
          <code>MD 20876</code>
          <country>USA</country>
        </postal>
        <email>shashwath.bindinganaveliraghavan@hughes.com</email>
      </address>
    </author>
    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>

    <date year="2017"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The BULK DNS resource record type defines a method of pattern-based
creation of DNS resource records based on numeric substrings of query
names.  The intent of BULK is to simplify generic assignments in a
memory-efficient way that can be easily shared between the primary and
secondary nameservers for a zone.</t>



    </abstract>


    <note title="Ed note">


<t>Text inside square brackets ([]) is additional background
information, answers to frequently asked questions, general musings,
etc.  They will be removed before publication.  This document is being
collaborated on in GitHub at
&lt;https://github.com/vttale/bulk-rr&gt;.  The most recent
version of the document, open issues, etc should all be available
here.  The authors gratefully accept pull requests.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The BULK DNS resource record defines a pattern-based method for
on-the-fly resource record generation.  It is essentially an enhanced
wildcard mechanism, constraining generated resource record owner names
to those that match a pattern of variable numeric substrings.  It is
also akin to the $GENERATE master file directive <xref target="bind-arm"/> without
being limited to numeric values and without creating all possible
records in the zone data.</t>

<t>For example, consider the following record:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK A (
                      pool-A-[0-255]-[0-255].example.com.
                      10.55.${1}.${2}
                   )
]]></artwork></figure>

<t>It will answer requests for pool-A-0-0.example.com through
pool-A-255-255.example.com with the IPv4 addresses 10.55.0.0 through
10.55.255.255.</t>

<t>Much larger record sets can be defined while minimizing the associated
requirements for server memory and zone transfer network bandwidth.</t>

<t>This record addresses a number of real-world operational problems that
authoritative DNS service providers experience.  For example,
operators who host many large reverse lookup zones, even for only IPv4
space in in-addr.arpa, benefit from the disk space, memory size, and
zone transfer efficiencies that are gained by encapsulating a simple
record-generating algorithm versus enumerating all of the individual
records to cover the same space.</t>

<t>Continuing to prose-up this message from John &#8230;</t>

<t>1) Minimize operational costs by &#8230;
   a) Eliminating tickets where singletons force a generate to be
      split in order to properly function
   b) Broken SWIP scripts - Due to its scarceness, IPv4 is quickly
      becoming a very valuable commodity.  One which can't even be
      purchased without justification.  Reverse records must exist
      for all assigned v4 IP space whether a service exists on
      them or not.</t>

<t>2) Reduce blind-spots
   -  Many customers rely on secondary DNS services and as more
      and more $GENERATES are used, the WIRE version silently
      increases exponentially.  We've seen zones which live on the
      primary quietly (safely) as a couple MB only to expand to
      65M and even 110M over the WIRE.  These legitimate zonefiles
      fail to transfer reliably or even at all.</t>

<t>3) Reduce start-up times
   -  Another issue with large expanded zones is the increase in
      start-up times.  A relatively small zone can take longer and
      longer to deploy to memory, taking automated deployments
      take longer to complete, even leading to timeouts and
      redeployment.</t>

<t>4) Transfer intact
   -  Many customers want 'copies' of zonefiles for their records
      and local processing.  These copies should ideally look
      similar but they can deviate significantly where methods like
      $GENERATE are concerned.</t>

<t>5) More Efficient Management services
   -  Many companies leverage DNS and IP management services.  By
      implementing bulk-rr aware services, these systems can
      be more efficient in search synthesis with bulk-rr's
      multi-level features.</t>

<t>6) Compatibility for IPv6 generics
   -  Just not to leave IPv6 completely out of the picture.  I
      understand this horse is on its side and cool to the touch
      but just because we don't do it doesn't mean it won't
      happen.  In fact it is already happening.  My understanding
      is Knot-DNS is already touting this capability and several
      closed-source implementations exist as well.</t>

<section anchor="background-and-terminology" title="Background and Terminology">

<t>The reader is assumed to be familiar with the basic DNS and DNSSEC
concepts described in <xref target="RFC1034"/>, <xref target="RFC1035"/>, <xref target="RFC4033"/>,
<xref target="RFC4034"/>, and <xref target="RFC4035"/>; subsequent RFCs that update them in
<xref target="RFC2181"/> and <xref target="RFC2308"/>; and DNS terms in <xref target="RFC7719"/>.</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
<xref target="RFC2119"/> when, and only when, they appear in all capitals, as shown
here.</t>

</section>
</section>
<section anchor="the-bulk-resource-record" title="The BULK Resource Record">

<t>The BULK resource record enables an authoritative nameserver to
generate RRs for other types based upon the query received.</t>

<t>The Type value for the BULK RR type is TBD.</t>

<t>The BULK RR is class-independent.</t>

<section anchor="bulk-rdata-wire-format" title="BULK RDATA Wire Format">

<t>The RDATA for a BULK RR is as follows:</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       Domain Name Pattern     /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                                                               /
/                      Replacement Pattern                      /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Match Type identifies the type of the RRset to be generated by this
BULK record.  It is two octets corresponding to an RR TYPE code as
specified in <xref target="RFC1035"/>, Section 3.2.1.</t>

<t>Domain Name Pattern consists of a pattern encoded as a wire-format
fully qualified domain name.  The full name is used so that numeric
substrings above the zone cut can be captured in addition to those in
the zone.  It needs no length indicator for the entire field because
the root label marks its end.</t>

<t>Special characters are interpreted as per the following Augmented
Backus-Naur Form (ABNF) notation from <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
match         =  1*(range / string)

range         =  "[" [decnum "-" decnum] "]" /
                  "<" [hexnum "-" hexnum] ">"
                      ; create references for substitution
                      ; limit of 32 references
                      ; [] is syntactic sugar for 0-255
                      ; <> is syntactic sugar for 00-ff

string        =  1*(ctext / quoted-char)

decnum        =  1*decdigit
                      ; constrained to 65535 maximum.

hexnum        =  1*hexdigit
                      ; constrained to ffff maximum.

octet         =  %x00-FF

decdigit      =  %x30-39
                      ; 0-9
hexdigit      =  decdigit / 0x41-0x46 / 0x61-66
                      ; 0-9, A-F, a-f

ctext         =  <any octet excepting "\">

quoted-char   = "\" octet
                       ; to allow special characters as literals
]]></artwork></figure>

<t>Interpretation of the Domain Name Pattern is described in detail in
the "BULK Replacement" section.  Note that quoted-char must be stored
in the wire format to preserve its semantics when the BULK RR is
interpreted by nameservers.</t>

<t>The limit of 32 references is meant to simplify implementation
details.  It is largely but not entirely arbitrary, as it could
capture every individual character of the text representation of a
full IPv6 address.</t>

<t>Replacement Pattern describes how the answer RRset MUST be generated
for the matching query.  It needs no length indicator because its end
can be derived from the RDATA length minus Match Type and Domain Name
Pattern lengths.  It uses the following additional ABNF elements:</t>

<figure><artwork><![CDATA[
replace       =   1*(reference / string)

reference     =   "$" "{" (positions / "*") [options] "}"

positions     =   (position / posrange) 0*("," (position / posrange))

posrange      =   position "-" position

position      =   1*decnum

options       =   delimiter [interval [padding]]

delimiter     =   "|" 0*(ctext | quoted-char)
                        ; "\|" to use "|" as delimiter
                        ; "\\" to use "\" as delimiter

interval      =   "|" *2decdigit

padding       =   "|" *2decdigit

]]></artwork></figure>

<t>[ Is this complexity beyond simple ${1}, ${2}, etc, really worth
it?  I definitely see how it could make for shorter replacement
patterns, but does it enhance their clarity and usability? ]</t>

<t>The Replacement Pattern MUST end in a period if it is intended to
represent a fully qualified domain name.</t>

</section>
<section anchor="the-bulk-rr-presentation-format" title="The BULK RR Presentation Format">

<t>Match Type is represented as an RR type mnemonic or with <xref target="RFC3597"/>'s
generic TYPE mechanism.</t>

<t>Domain Name Pattern is represented as a fully qualified domain name as
per <xref target="RFC1035"/> Section 5.1 rules for encoding whitespace and
other special characters.</t>

<t>Replacement Pattern is represented by the standard &lt;character-string&gt;
text rules for master files as per <xref target="RFC1035"/> section 5.1.</t>

<t>It is suggested that lines longer than 80 characters be wrapped with
parenthetical line continuation, per <xref target="RFC1035"/> Section 5.1, starting
after Match Type and ending after Replacement Pattern.</t>

</section>
</section>
<section anchor="bulk-replacement" title="BULK Replacement">

<t>When a BULK-aware authoritative nameserver receives a query for which
it does not have a matching name or a covering wildcard, it MUST then
look for BULK RRs at the zone apex, selecting all BULK RRs with a
Match Type that matches the query type and a Domain Name Pattern that
matches the query name.  Note that query type ANY will select all
Match Types, and all query types match a CNAME or DNAME Match Type.
One or more answer RRs will be generated per the replacement rules
below.  Examples are provided in an appendix.</t>

<t>By only triggering the BULK algorithm when the query name does not
exist, administrators are given the flexibility to explicitly override
the behaviour of specific names that would otherwise match the BULK
record's Domain Name Pattern.  This is unlike BIND's $GENERATE
directive, which adds the generated RRs to any existing names.</t>

<section anchor="matching-the-domain-name-pattern" title="Matching the Domain Name Pattern">

<t>A query name matches the Domain Name Pattern if the characters that
appear outside the numeric ranges match exactly and those within
numeric ranges have values that fall within the range.  Numeric
matches MUST be of the appropriate decimal or hexadecimal type as
specified by the delimiters in the pattern.  For example, if a range
is given as [0-255], then FF does not match even though its value as
a hexadecimal number is within the range.  Leading zeros in the
numeric part(s) of the qname MUST be ignored; for example,
001.example.com, 01.example.com and 1.example.com would all match
[].example.com.</t>

<t>When a query name matches a Domain Name Pattern, the value in each
numeric range is stored for use by the Replacement Pattern, with
reference numbers starting at 1 and counting from the left.  For
example, matching the query name host-24-156 against
host-[0-255]-[0-255] assigns 24 to ${1} and 156 to ${2}.</t>

</section>
<section anchor="record-generation-using-replacement-pattern" title="Record Generation using Replacement Pattern">

<t>The Replacement Pattern generates the record data by replacing the
${&#8230;} references with data captured from the query name, and copying
all other characters literally.</t>

<t>The simplest form of reference uses only the reference number between
the braces, "{" and "}".  The value of the reference is simply
copied directly from the matching position of the query name.</t>

<t>The next form of reference notation uses the asterisk, "*".  With
${*}, all captured values in order of ascending position, delimited by
its default delimiter (described below), are placed in the answer.</t>

<t>Numeric range references, such as ${1-4}, replaces all values captured
by those references, in order, delimited by the default delimiter
described below.  To reverse the order in which they are copied,
reverse the upper and lower values, such as ${4-1}.  This is useful
for generating PTR records from query names in which the address is
encoded in network order.</t>

<t>Similar to range references, separating positions by commas creates
sets for replacement. For example, ${1,4} would be replaced by the
first and fourth captured values, delimited its default delimiter.
This notation may be combined with the numeric range form, such as 
${3,2,1,8-4}.</t>

<section anchor="delimiters" title="Delimiters">

<t>A reference can specify a delimiter to use by following a vertical
bar, "|", with zero or more characters.  Zero characters, such as in
${1-3|}, means no delimiter is used, while other characters up to an
unescaped vertical bar or closing brace are copied between position
values in the replacement.  The default delimiter is the hyphen, "-".</t>

</section>
<section anchor="delimiter-intervals" title="Delimiter intervals">

<t>A second vertical bar in the reference options introduces a delimiter
interval.  The default behavior of a multi-position reference is to
combine each captured value specified with a delimiter between each.
With a delimiter interval the delimiters are only added between every
Nth value.  For example, ${*|-|4} adds a hyphen between every group of
four captured positions.  This can be a handy feature in the IPv6
reverse namespace where every nibble is captured as a separate value
and generated hostnames include sets of 4 nibbles.  An empty or 0
value for the delimiter interval MUST be interpreted as the default
value of 1.</t>

</section>
<section anchor="padding-length" title="Padding length">

<t>The fourth and final reference option determines the field width of
the copied value.  Shorter values MUST be padded with leading zeroes
("0") and longer values MUST be truncated to the width.</t>

<t>The default behavior, and that of an explicit empty padding length, is
that the captured query name substring is copied exactly.  A width of
zero "0" is a signal to "unpad", and any leading zeros MUST be
removed. [ Unnecessary complexity? ]</t>

<t>If a delimiter interval greater than 1 is used, captured values
between the intervals will be concatenated and the padding or
unpadding applied as a unit and not individually.  An example of this
would be ${*||4|4} which would combine each range of 4 captured values
and pad or truncate them to a width of 4 characters.</t>

<t>[ If this is kept, the element/feature should probably be renamed
from "padding" since it is just as likely to truncate. ]</t>

</section>
<section anchor="final-processing" title="Final processing">

<t>The string that results from all replacements is converted to the
appropriate RDATA format for the record type.  If the conversion
fails, the SERVFAIL rcode MUST be set on the response, representing a
misconfiguration that the server was unable to perform. [
The EDNS extended-error code would be useful here. ]</t>

<t>The TTL of each RR generated by a BULK RR is the TTL of the
corresponding BULK record itself.  [ BULK should probably have its
own TTL field because using that of the record itself feels like bad
design.  On the other hand, if BULK is never meant to be queried for
directly and only appears in authoritative data, its own TTL is pretty
useless normally. ]</t>

<t>The class for the RRSet is the class of the BULK RR.</t>

<t>If the generated record type is one that uses domain names in its
resource record data, such as CNAME, a relative domain names MUST be
fully qualified with the origin domain of the BULK RR.</t>

</section>
</section>
</section>
<section anchor="known-limitations" title="Known Limitations">

<t>This section defines known limitations of the BULK resource type.</t>

<section anchor="unsupported-nameservers" title="Unsupported Nameservers">

<t>Authoritative nameservers that do not understand the semantics of the
new record type will not be able to deliver the intended answers even
when the type appears in their zone data This significantly affects
the interoperability of primary versus secondary authorities that are
not all running the same software.  Adding new RRs which affect
handling by authoritative servers, or being unable to add them, is an
issue that needs to be explored more thoroughly within dnsop.</t>

<t>On the resolver side, rolling out a new semantics in DNSSEC has also
proven to be difficult in the past.  Lacking NPN support effectively
means that operators using BULK will have to forego DNSSEC signing of
the affected zones, or do online signing of the dynamically generated
records.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Two known security considerations exist for the BULK resource record,
DNSSEC and DDOS attack vectors.</t>

<section anchor="dnssec-signature-strategies" title="DNSSEC Signature Strategies">

<t>DNSSEC was designed to provide validation for DNS resource records,
requiring each tuple of owner, class, and type to have its own
signature.  This essentially defeats the purpose of providing large
generated blocks of RRs in a single RR as each generated RR would
require its own legitimate RRSIG record.</t>

<t>In the following sections several options are discussed to address
this issue.  Of the options, on-the-fly provides the most secure
solution and NPN provides the most flexible.</t>

<section anchor="on-the-fly-signatures" title="On-the-fly Signatures">

<t>A significant design goal of DNSSEC was to be able to do offline
cryptographic signing of zone contents, keeping the key material more
secure.</t>

<t>On-the-fly processing requires authoritative nameservers to sign
generated records as they are created.  Not all authoritative
nameserver implementations offer on-the-fly signatures, and even with
those that do not all operators will want to keep signing keys online.
This solution would either require all implementations to support
on-the-fly signing or be ignored by implementations which can not or
will not comply.</t>

<t>One possibly mitigation for addressing the risk of keeping the zone
signing key online would be to continue to keep the key for signing
positive answers offline and introduce a second key for online signing
of negative answers.</t>

<t>No changes to validating resolvers is required to support this
solution.</t>

</section>
<section anchor="alternative-signature-scheme" title="Alternative Signature Scheme">

<t>Previous versions of this draft proposed a new signature scheme using
a Numeric Pattern Normalization (NPN) RR.  It was a method to support
offline signatures for BULK records, with the drawback that is
required updates to DNSSEC-aware resolvers.</t>

<t>That mechanism is not specific to BULK and has been removed from the
current draft.  If there is further interest in pursuing it, it can be
reopened as a separate draft.</t>

</section>
<section anchor="non-dnssec-zone-support-only" title="Non-DNSSEC Zone Support Only">

<t>As a final option zones which wish to remain entirely without DNSSEC
support may serve such zones without either of the above solutions and
records generated based on BULK RRs will require zero support from
recursive (resolving) nameservers.</t>

</section>
</section>
<section anchor="dnssec-validator-details" title="DNSSEC Validator Details">

<t>Verification of DNSSEC signed BULK generated RRs may be performed
against on-the-fly signatures with zero modification to their
behavior.  However, verification using NPN records would require
changes to the logic to incorporate processing RDATA generated by BULK
logic as described above so the results will be compatible.</t>

</section>
<section anchor="ddos-attack-vectors-and-mitigation" title="DDOS Attack Vectors and Mitigation">

<t>As an additional defense against Distributed Denial Of Service (DDOS)
attacks against recursive (resolving) nameservers it is highly
recommended shorter TTLs be used for BULK RRs than others.  While
disabling caching with a zero TTL is not recommended, as this would
only result in a shift of the attack target, a balance will need to be
found.  While this document uses 24 hours (86400 seconds) in its
examples, values between 300 to 900 seconds are likely more
appropriate and is RECOMMENDED.  What is ultimately deemed appropriate
may differ from zone to zone and administrator to administrator.</t>

<t>[ I am unclear how this helps DDOS mitigation against anyone at all. ]</t>

</section>
<section anchor="implications-of-large-scale-dns-records" title="Implications of Large-Scale DNS Records">

<t>The production of such large-scale records in the wild may have some
unintended side-effects.  These side-effects could be of concern or
add unexpected complications to DNS based security offerings or
forensic and anti-spam measures.  While outside the scope of this
document, implementers of technology relying on DNS resource records
for critical decision making must take into consideration how the
existence of such a volume of records might impact their technology.</t>

<t>Solutions to the magnitude problem for BULK generated RRs are expected
be similar if not identical to that of existing wildcard records, the
core difference being the resultant RDATA will be unique for each
requested Domain Name within its scope.</t>

<t>The authors of this document are confident that by careful
consideration, negative_side-effects produced by implementing the
features described in this document can be eliminated from any such
service or product.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>Neither the BULK nor NPN records introduce any new privacy concerns to
DNS data.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>IANA is requested to assign numbers for two DNS resource record types
identified in this document: BULK and NPN.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This document was created as an extension to the DNS
infrastructure. As such, many people over the years have contributed
to its creation and the authors are appreciative to each of them even
if not thanked or identified individually.</t>

<t>A special thanks is extended for the kindness, wisdom and technical
advice of Robert Whelton (CenturyLink, Inc.) and Gary O'Brien
(Secure64 Software Corp).</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1034;
&RFC1035;
&RFC2119;
&RFC2181;
&RFC2308;
&RFC2317;
&RFC3597;
&RFC4033;
&RFC4034;
&RFC4035;
&RFC5234;


    </references>

    <references title='Informative References'>

&RFC7719;
<reference anchor="bind-arm" target="https://ftp.isc.org/isc/bind9/cur/9.9/doc/arm/Bv9ARM.html">
  <front>
    <title>BIND 9 Configuration Reference</title>
    <author >
      <organization>Internet Systems Consortium</organization>
    </author>
    <date year="2016"/>
  </front>
</reference>


    </references>


<section anchor="bulk-examples" title="BULK Examples">

<section anchor="example-1" title="Example 1">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${4-1}.example.com.
        )
]]></artwork></figure>

<t>A query received for the PTR of 4.3.2.10.in-addr.arpa will create the
references ${1} through ${4} with the first four labels of the query
name.  The ${4-1} reference in the replacement pattern will then
substitute them in reverse with the default delimiter of hyphen
between every character and no special field width modifications.  The
TTL of the BULK RR is used for the generated record, making the
response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-10-2-3-4.example.com.
]]></artwork></figure>

</section>
<section anchor="example-2" title="Example 2">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${2,1|||3}.example.com.
        )
]]></artwork></figure>

<t>Example 2 is similar to Example 1, except that it modifies the
replacement pattern.  The empty option after the first
vertical bar causes no delimiters to be inserted, while the second
empty option that would keep the delimiter interval as 1.  The latter
is relevant because the final value, padding of 3, is applied over
each delimiter interval even when no delimiter is used.  Not all
captures from the substring are required to be used in the response.</t>

<t>The result is that a query for the PTR of 4.3.2.10.in-addr.arpa
generates this response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-003004.example.com.
]]></artwork></figure>

<t>[ Admittedly you can't do this very effectively without the field
width complexity. Is this sort of name common?  Does it need support?
Admittedly $GENERATE had the feature, but is that reason enough? ]</t>

<t>[ Change this to a hex matching example? ]</t>

</section>
<section anchor="example-3" title="Example 3">

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.". RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@    7200 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
0-3 86400 IN NS ns1.sub.example.com.
]]></artwork></figure>

<t>A query for the PTR of 25.2.2.10.in-addr.arpa is received and the BULK
record with the CNAME Match Type matches all query types.  25 and 2
are captured as references, and joined in the answer by the period
(".") character as a delimiter, with ".0-3" then appended literally
and fully qualified by the origin domain.  The final synthesized
record is:</t>

<figure><artwork><![CDATA[
25.2.2.10.in-addr.arpa 7200 IN CNAME 25.2.0-3.2.10.in-addr.arpa.
]]></artwork></figure>

<t>[ Without $* and options complexity, the pattern to get the same
result is just ${1}.{$2}.0-3 which is not really significantly onerous
to enter, and slightly less arcane looking to comprehend. ]</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAOin81kAA8V9bXfbRrLm9/4VfRjviZVLUu927MkmI1t24rm27Cs58Zkb
+8wBwaaIKxBg0IBoxtb+9q2nqroBUJQ9s/NhnUkskY1GdXXVU6/dMxqNTJ3V
uXtsn/z68j/t6dmFPXe+bKrU0Q9pWU29SSaTyl3riPNzMy3TIlnQI9MqmdWj
VVlOV2VVz0eTJr8aVdVo76GZJjUNONjbf2hMtqwe27pqfH2wt/do78AklUse
2xdF7arC1WZ1+Rgvfv3Gviurq6y4tD9XZbM0V6t20OgU7zJpUj+2vp6aZok3
eHrF4d73Q3u0d3jI/z3i/x4bk5ZTmumxbfwo8WmWmWX22Fg7snWZ8t9+vajc
zMvPRD7/YpKmnpcVj6R/rc0KesffxkSZLpI/leX/rZwXG1+UFb3yqSvqplq/
zIqrIS0gHfNXnt7giPqjg+M9e2afJ1k1Sz7a04q/TbN6/dieVDkRXZeFfFZO
6S2/ndiDg4O9Q/2oKeqKRv56ccIfuEWS5ULKOJLy1w4F47RcmP5yTsf2SZLn
btVZy6lLiu6n/8RCDg6Pj+1pQ494+7SkTarsk/x6OrQXtaOd37OHe3udtf1C
+zi9tTISkP0vrgyEjYWwryzrgpaVFdj1pEiuXZ7Z8+RynlwnRWedF/PEz1dJ
Pf/iWF79L83lnJZ25mpi6pW9WPvaLXyPBftE/UP77OMyL6ukzsrCvkwK11n0
z65aJEVdrrrrfnVK6/7+4YMvrtsHQseTHqGV0vnXOZO3dXufjomOVeWK1HW3
OLnOpvZp/yte6clVQi+1b106L8q8vMzcxjJJYp9UZTJdJevO4p4mi0mVTS9d
d20ndu9g/+hgtL93fPTFBdZJ7v6a8JtlEUVJvKqzawftq2bpPmlz++Ox/niw
v/8o/vj9fviRUCD+uP9Qfzw8fhR+BEC0Px61P4Z5jw/wqcmK2QYZDx/KC7EN
o6RaPOZFBNB8cXZqH5H4F7PsslEZOHcz13K4RZTI7wBqQabwPCAoaxY8LIKn
iEidVJfYhnldL/3j3d1ZvRxnPh3TXLv09y4oe7SbNtXuo/GjXULnXSJz98n1
o5PzV+N5vciNGY1GNpnQfiZpbczbuWvhvgpwXzHc23q9dHbqZllBwp/YhSPy
p7ac2WVSg+zRJPFualLCcF4tfbNlGm95mKUBRbNwVZZa34AAkmSPZ/5oXLU2
kEw/thYUZcSVosZ3TFvmCaqtzxbLPJut7aUreJbE++yyWNBIT0/YxCzcoqzW
IzebZWmGCUhIbT1PapsSpE2cdYnP8jUUqiKCJqTOzhU0wtlllS2Sam2TYmo8
kV1M8RvT5KprV3lLwkA8+LMsHGMf87Eoa/ePZ9N/4G/ipftYQ++yqbP+j4be
YSfE5StH9N1///v7DztYSTKdZuBWkhNf0qtLsm/0zihsZTEkIvwKr6RFzypH
7ClqojrxV0Q0/eYxyg+FDzTNovFg5dC4OhUGru0qy3OsuCKWXPNaaX5aZjPJ
s5RfwyOJHhKSBjwEbRNHE5G9zPNkAhiTXSPe/pzVvzQTm9Tm/Q9B9i6zet5M
oLC71zVUeFeN/vsfdRsXpa8hBDS7AQ9VRsDv8NahLZe0BZn3tK6hpRXQ7pRN
PrWJLIAALiNqcmfmpEk6sSiSt5egcUZ2h7iTpm5Z0wLpMeaZr/1YpH2RTaf0
vPkG2laV0ybF+r8i+63Y94Q9KAFx05TFiJYymtHbN5+WrVE2v2DeOu9pvVnC
xBbWFfOEcGFqaKemaVJh5pQ+yvxiSEBZQEGzAh6QzkXv3nwL2RKytCykhmSF
CPNO5J0kKZ23tIPr10mVgY9blDDQaJLclzYhv8vydM7e+/nZ2bPzk7fPaEbC
p8rOMpphmhEBwEX76VPAwpsbkjmioKkNS5HNs0UGommm8MbrJG/A0mIaxlrB
DhqO7V6WpNHY6gAcmSgnlA5ImNCGPic1dB8TggInfCJtq3jUjMS2XGEueZwg
/P/QH6OjIahj+/2DI3JHXpzJxp/Y+wrGm3+WZZmPTka/740Ojo8/hL/H3bnu
eHJ/b3x8PL73af+G/nNws23UjhBmiOmsp6LvUWwZapSAvdFe96W0UMKLy7nR
r4ko/NsbAtYyQ168uT4C3FQQPa+E7Y334iTyyYH+a8yrhoQmh4mpgoh5gJei
p6gE7d0cQrAg6Vxkf4LfeBmBcZlmEFODdZCECDBjLQKhVuCZt593lCS88DNI
sPpVE/pqlU3J0YFyks4oEe0aEsjShB4hgSbJySniqAgrCENE2wgNl1VJIkSW
FIqgTnxWsxlnRQcxWQrEL68hO6SZH+nxDFaaFKErX0bmBdKs5qWdA87Ih1sL
j4gAgJqzeVleNUteEyDsmvAMqy4L0nTsgfHLJIVRo/+NsJZxUi2TIbG0II7W
hPG8sdArf2V58DAwy2d/uiFbpT7Lgo2jf2WlFubmMuENmqwJXtJk6ZtclUuM
Z1CsUYAn1rtL8Ge+sFhMQ9xgbW2VUgEbnifxq0nyqJ2k2Wl5rdrnCYWEdto8
cmLo+YZlowSnvRsRh2rsKYGVT4h7vGqOm8ZjemR/x74SiXK97UxLaAStCKPg
Q+3YZ4CWQiisM7GvK1gHCzuYOwqaWO6I50lETxAycaqNnhwJmGrywRg9mEZ6
KW3YrCnEPNCwyQ583Svaz4t3L95Yn1bZkt41olCH58voF0/YTQaOFjUUhaMl
kvinV/laXzYhdi1kF4hZa0ZBBmL6eEGhab0msXtNm0t6RfpHyvZtLVIU6V0S
6s/Z/ATc/B8KobNZa8rPVRbD3pBPQJN8zHytU7D7Aqxhp4lmIlKxJhZN4h7t
IfyboB38KHlnhT5OXy+IW/B4aLMOduiFZEfJwcmB/35Z1hwnjKx9BQVJ6fXl
AspVOWIq2f3WqeooodiChMgl50TfhE/wa2t7Lli2G1r+kEXt3YvzZzb4E+TQ
sXukT2cFLAqggrSaNEYtLnHonfuWEMDD4WNNVXbnwIWS7UxgtrqCtIsOftd9
n8xoETugM0EMQ4pkXz0R/SYpoBeB5rrU5x8cv+JF8Bbu7++9slFJQLm4MIAN
Rx4UvaoWAwfL6sNmkc/DJjioO3ERxnuNLeB5ofB5TltxGLfCU3BQs5plCxd2
44Q2DDvLDpaYBgEvodpNlRlwsVnLhX30Q1CV3qxE/AmIYTiFJ72ATDE0wUjU
yRXgsIABAWbJFPoBrWfqKDxmpgm8DfEEq0ZD4sI+jgxh2xFErzMpQw6QrHaK
tLlLpoozoJB0w3deTW5+nI+YdbRj3waWUoyBCGir0K4oULffpuWS0PVbIGDc
INYj4lQWLKTviG1epmKASLIBRXGrZabg2ZLVYS8QdiNwmRCN9sVOSLVr+O/g
5tRdw6BaKCzrOocBgnTihnoS36sgt62vBnUhbUsRWU5p2ceErdCoZzEwovUS
BrPbH1SxxwniMbmiRHIOXAFcQ2uxRsKMxe2HaaVPogpif/AttkVDApusQFQY
znpMfPEa9KZJEcFSlL+N4TJgB2HsnEYXeIxEleVYp/427MCiyetsBIJzOyOv
siGfgRb/YIdialpOnU0yQv017yAh9YMQR4aV/w2QSeoCUSKpunYyKsgblK+p
gzlcZileAM9ZX09RHIlOzVAAO4cAxUGvEEHBUCAsxLcpuW7Bv65LcrnC0hXW
YTASQju7QpgEYzCFqaH/Oo/fFsjP0e8rfKfPzpMlhVGghnwPEmt8j1gzJ22e
rvVrkchX6w6pCPd017z9T1r8CPvceZIIFDuLJZFLkSgTsRDPspHrBGlOVp5M
gUQoUQjYQHmxJ0DQlWPYMt98Y5/E8Jene+sqMpNIOq0lNgMFDF0wWuSUTMWG
0wJJWTLSlujpUmhG4UUQUfr74tlTwxoAez11sNwTep5k6dOn8+dPkU+6uRnG
X47jL0gO0S8m/MLDMGn4gIb+hUMnicstfaoOmOShxVISfPIDyEtRZBQnQHIK
EyiZlkKqhY9kIb90czOW1V8himdbPnj168XbwVD+tmev+efzZ//1K1mTU/x8
8cvJy5fxBxlh6JfXv77U7/FT++TT169ePTs7lYfpU7vx0auTvw/E6Ry8fvP2
xeuzk5cDicW6+QIotGwI0jXVsnLA76TP78AGLAzQVQg32XbKrwx3kM+k4iwO
2ROSM/LYc4KJhEFzVUjwjxA+Bu0btYlOOL8ZJrsC7hbMgu2HA216B9Y7eorn
5wLzYjmRBAsprGYpnoKkrDi1QfNMdcfeIl3GMW6wEqFOIpk0Yt7bJ6fjDqX0
DdQqJ/kekR/lSEmnYqmgHjzi9OTtiX1H4RQiEzKR8rR8LCmpzkyJ1yjYh+B3
S/RJIeqWfw62/HNoD43d4y8P7ZE9tg/sQ/u9ffSvfGb+Y/Rv/mM+d0h/xYkN
5nT88/nWAvt/dr9Og448JSeEZPAMscwbTZ3IDLtfecfX/vwTNHyVD/8+DXfM
cE4+EoUBrNXdZf/zM/wLNPz7fJDkSUcSMigNeUhOnFhWNrXTpMuuVphqE2mT
NWOZUbgASsQ8Xb0qbZnWnPcoK8IS0vngYRKCkKK9/fubZ1zjIH2j2N6leHXP
uLA9uXAcSNrD8cF4n1R6m3BxAosDrVknW0fBezkVLE3IyFVuJMlhI6nOPygI
l1dOZUrgmGZGMYJ/x1IQMllfinnSJJzp5N6TCUUmbYYtbWKinBAY7g0vKiSs
bUwxEqyHh4RthXNkpwr4TcUl2WQkC1IkTiIQYoMIw4jqfBocHJ6kKsnjypMJ
OW0UdV159pUIBolhF2AtUgDzBMUKOOawORvWZnkr/XfSXEKU3dTAw2j86Cxp
KoZPe//kydnzHXh5UrHgJATvGoo+bHtZuiR/Gv78b4LM7+5T4EB+8K4V7u0Y
Ix90Bg1+H9jfpy4lVtvBaGDlxw928GFAgn9bGQY/0Pi5+xjGy480/sfBHcnF
v0jCFKZNC0uaYcOmZnUTMhdbH+WMLCTt8KDz/J3Df/8AGYLTTcznfPFlIhvK
ydA7n/vhxzuf2xvNZsYIA/vMpe39WBNz/2hK2rgRtpw4rLzsjqSPphkFzncz
KOTOxV98cHx8eEyi9TFbNAvaXmV3d0r66F+ackZ/OjMyWNjOjP/rIy30+XMm
nyfufHO4Nzp8dOeL9kaPTKAmPhRn2bV7H4/2R/SfB/zzg/3RgwdfmmtoT0bP
yYkaEdOFwR0qf0CgJ7S7j3CUsSeD94MfjelsAo+lT2XkHS+jtwEcoX/Wb1Fa
hKk1QgUfEt9BhWPdEBq8DSCzDfd9Ss9keUCggXqC0XwNkGfSlNhZWWs1pLue
hURYpMUUZqLuxq9eMTgxyEo2UPxCCdwc6vYUJ7LD2nPryIR00WjSqxiqo7dd
6yxnQpFm6FY2+1GTkcXG8oxkbsgAIFJEoCqginpSNclIQJFQSYCgyFLlU6Mo
jkQJeattBrfdnMB6Fo7K8bqLdlcStjgSB2sSnla1zV0Im4S4dyUFASlqiAHm
yKVrgk0wDIy0ED12qb9mTkJorEbCxMpEBT+8zaSLf6yPU1TZ+K7nyNFXK2wm
LELGK78br+5Ea1g6pVvYEetks6KzXQljWh1jsxH2vGc64odh5ODewA4+Dez9
ZekziZl37eC7wY79vVzy72QXbgbGtN+HR+Mj9AT9yGZpx+59d38wHGz/coen
6dgvTBMHwhSFX9r3dRcluEzQt2wpke+mTup+lf2dNYPCIfv7EowrLj98ACSG
7+PCPw9Aq+DT574BuANuCG8G7+kxUh0IA2bgsFOn/uJj79vH3m88ZiLFPeK+
O4g2x+hK7N0jBODe/25feE2acP7oI5ImE7cukTdhNbcoEQ4taoRc9x5yQSvn
oL+em6z+icRQam4ZZ5+8c6xcQb1Jda4k0qQQuao5SxwV06gvSTE00AK5Izyo
VWfNYFLgWYVkTuM1tfOTff9Bg8wtes6KTJrHjiF8r6ykn2eab+K+jSlbSRPR
hMZ9yW/lWLcbEb/pglAIervevm+RSp3kIsbYi8ItyoK8jlLTQ+zcofvn5uZb
b0LrCLvwseB+h3O+5UVfWgmiATijnSAgxgDH431bNSF/zP49xGg1p62VEgyy
LZJwuG1B78DcDfo4qOEyAOosU/v+hzjDSIDnRyM4HwnpFPV98KW75PuW/DGX
q+HYNZeXznNlH7Y15y6JkJ4nftrv97rGn9B5VSG9I7UrkkvCPaKTDCqtEU/D
vUK1UJtfvsDCoVQjkLRMZiB8A9OdBGry3RaOcQJp02Uw5h3MuuRRRpKnvjNN
pBkfSIKkgMBFLiQZzdCyYZ4je5y0to3Fg5M1XDDlrde2jyFUh7WKmFIY1AR4
UtUGj0pPjNCSpftITCC7k8b6bBzI4p50NaVtBVFTJjTXgV/JVpeL6+a3n9Ig
s+tVxclOzv4unQxCGujq0OEl5wdi22d87FF5enby6hm4c8o/tM+NDaqiEFNU
BFp/IjY3tQF9CAI7CChibiiwLFdE9zOp6UsIqbV/QbGCs48kOh9JPp6sta5X
ZSTmVehuYCa3pfLoCLasiZtvONVNS56iQwJxAzcQcHk+u9bnZrAImkqXEmKe
pRnKO5CPimhj/3biSJKysmE/TTMNqcij7MGKDQHjxirz6k1FirVS/63fts+h
/wt5ggJlJO5gpLGxjmRin89Qi6Vk/UQkWs5jPzgzspYcfxB3L8D+KqjAHQ6+
MSddJnbFbiski7vawRfp8pD0MYp/qLJgSOg5YicnCJv7SE/lYvAklQGloWBi
YzTrr3YrMZ9nEF4ZK3KGcdAGTaoEuoOfq2410VWVy4qreOQiZAuCPJJnCvGS
8KsoYzePpDge/ZLYBrWMG9drgsqQOmKCDO2lyBhh+XvtWeIMOxnS5y08KTNE
GNEJxP60ZK6JlKRHoDbcaNVtY/0vtfr6p6vKQGdkJkF9fd/vBGb8wTscOJRd
FgjA/iIGMTTc7O3td3uZhrb/O29c/5NVbBbkVZHntdGlFeB9i5RtxT/pMRBm
0FcuoUl74sFGkKNHph2upG7ZFpMzFKvX+vvCTh8tGfB9X+uCjdRMYxSTu1kt
u23ibi+6CtVZE5qTRgdHo/1jCtXQB+Rrw58FOYg/aAuItwdH0Fy4ocJXepJ/
P7gR3ZXCiv059jJabjTdtsy7HcaAFF7xWZorkzoB0wSudTXm3qfxeHzTDZLZ
pPHgmJCMzGnXPlT2LdfsGaBniR2pDkpo/iFfa1AuLrivOeaXZrKwQRz3iQ2Y
d/JsQQ+0aVjgmaaHdUPcBhIoPtM0rIiPCn47ByQHb14b7giYaicl2o7CsuL+
xrgrqE9rhWUNBXy52/TH3GYMYNnJy/wVEfr+O1D4DiJ579P771DblHqbMFch
LzZGIQXgU3WrAkHDCE3AKpNxhXWWNHndif7ut1kbtsA7QzG8kI9pADQx6bSc
s55+tQJAvg5aEgnNSEpHRzfDYOA9063kBvINq2Hp+zOExfTJVojdINtsUI3d
LGOfHx4RvtCcYhCleFlph8d0aLpjm+VS+mDIPYbrIuR210TqetO1wx7NzJwa
6XTovXl7Htu6WExaSfA9SkKKBmmpUEJAbKLdlUw60uraa0K6voXfjlBb3tsm
GibcEULBgmafyVo5be3sOFzjvlmiHRse3Sg+T6JrFphvZlmFjoACKNpQxLsp
hd392ipjY+kRjfK+SNZcuigXE2lTDd0BffSGxrR7QGpwODwY7g+/J/Fi2PvG
nkbLC++k1Swkm8RM0553ZF3zCZN1N1WEBjWOccwkIdkbfB6IKWBTGZ3aToxn
7X/jm/aTlkhyUCD/h59vhpw05NxY+36t9Ay1MfcW+KF5Cx6aaShUIy6DxUqc
ncBtqrh5g9t1Ko5Fo0DHMxIxH9RCxIa/rch3Gwq0tWy+XnK9fzAabPLZhsQL
M1w6BfskxteFvQiZp0w7+tmat3ocJtwgSv1pATZtGIo424PpujQqSOwBbAin
bb01ibo6yw0cw2Nj827z65hj2vDxwHO2OqTEHb5z6tac0ST84k3f796n7z6P
PpOasWeeKJP7T1v02CxpyQaK1q4k6ndAIE2m0iyklevQQxV4jyRwhDcGn9A6
GjPMRTZBX2vWQrIkTRRU1Cwa6HwbQMBJCViW5g3OzjgpiB7phNx1SItZLGtu
gNwz/SaLLcyNXma/VtgBfRNN9L6K4xvN7UkWWGysQhOjVIa876YEoiDBfUsh
WcwFTm5iB8c5WBFNCvt3ock6VaRA6VL2XTo0O141ge39wd5gR+0Ip1k2Hq2r
pkgTPWsh1YzQQ39b9Ica/CRck8BBFI09lb/LHheGsCU8mFcSdrXjd8ZyMm+7
LFXDLG4Wjaxg3KOVcJ8K9zQm3AY3aAp650BzBGiu78UUukijB5nGFNfYX4vC
ocUSXbptelUSly9m29Xtki2Xpqj2W8zcsDqmeygswlLMOKCnjKYpmNvCSBdZ
Rm46r0WSUEtia1CApsjE1CH6auswwqIiqLN4esTwaDOh3p+PoN9i5OWLHjCJ
UWNt2VwKXkjkQGWCiEh3GqxB3Bg82LFCkrsWQsClK7esJSTSasduwAXtZsV5
C25NZhsPmZgadlMGyooB2vKBqpw+5A7HRBpXpX860Dbm/YMmPs+KXh+t+uy1
pmMSlKo8CbX6Qwkf+YqGyIskFjAgUSdMNxSP3VMo9wUU6Zx5RAFIEw08DRrN
DXqypXHVXjw7/+35yYuXtuIukKCHKHSVwVChbcS7YZuhZaEwi8ynvROiUbk0
w7hKkI/h8wEoRLoKZELqmQfP0DRIfj9n2UeuqmC7QUMUGfEhrRyW00T+27cv
sdEsL+fn/T6YXv9Y3Q4Gz/r9L51mGThkLp8Rn0hY+PNNYeAMCo0y5argKXud
HxpIBhTqsF8mJtvjcpERMv9TuOWEF3xMQrxwdnFgpjj9EQ6JFk6OGWlZdSJB
UyaBuomxVmxAlLSRHB7tZXwRcg7Z6wzk0+wwI/XaNMhxerhg1UJUONRLuI8v
ytP5+YWrA1PlK12qMnzMYNXPpnUP3nLrsOZaOZbr1BqYZrD31rFFpjw4jpxa
HSI9pC37/TkCtm4WNaLnTBy5RNFdHrpF/jdoGSYGvQTYSqOvHtwKhYNwivKK
x+XtuN5kcRGsfJx7+LXwFD6VrMFnbU2d/MM7UvOaqJuWjLG9ZmzXKeGrZBdu
1eM14zsehP+jugcjEg5uxMJWOJqL5JmJaWBJ4rXSJOW1eGxR3Kt+G38ymxGP
vIl2hg89aUoYR6z1FIqeymqPzwRJ7R78MiCdYbApipAckhNZ5axGSQOGRgwT
ls5JdMnoMhkGqpRzALDeUAXl7tBy9R1DWnQifGeDMmSbXhg5ZCLdZlzCFyV0
fCmC02M9mBw5R1Q6JaE4LXy5pG1/HbGzzMF45HIJQCmmYuvaoJII6tvdpIel
2ZuwACkBXxqk9l2hb55mOEYA9yemUD0ClZdJysdOzt6cWZUznDiQZHe+NhJk
CTzFI4CCWSywLC4McWgHolVdloEQ3mWQK86f8Dccs2EukogS+sCAt2PFM12T
OCPkydedRgkN/VndLlzacMX2qR58jUq3KlXHfBiS9oZoA36vL3kDO4ZGl8Dt
EaevL2xS18QoEsEUDBDF1DEX8N/YDbhAhcPxRRFhgpU0gcs5Mzlch3IL/JJs
qo13XO+5fVfAUE+Pgi1sr+pGPSM+7DwUJFUnlmtcZbQ1GGJ8ICxENd1z1wRH
5LwIJC+baolcEesa6GOvFx02pmMg8zK9YtSAynDNW84YwmDSKpnEbjFEDHE4
AhtNSOesF9mFFz+HplO0Qm00mSh0+nC8Ioa6iBCn5D403gtbNd1j1FXzHF68
FlnSh0jg2kPqug2yfD6bz8LiDOkbdw4yV6ETt0dKwSp3Giu9bmeNkiDBewty
KgL2skxyvRoiCIdoZwRaUojZDBph0mq9rMvLKlnO0TnY6oc0qJZ8LwSt6sq5
ZcA5HJQAZysUzfkgoSyLEaW7ePUmrW6Ov7PMq9dNXBZm0zJ7jSI16ccxxVSq
onK6sjuj6RSON8/D0IKRX23pi3Krws3VGa4ddI71q3XjFHd7NBlgtFKfB4yJ
fCPOeMUaTZbFnRZ/0WXsSAVpxbybhIITgpBmg1oJeTq1HBiPzcfjmVYmnLyw
aGk5cFvzJrlw8p82ktTksoUIFfGw1chiQxq62w/JMJ0VB3CNHjGfGeQOAxc5
FOSGu2fkWW10unbRxqtQ8nbEPBOnMzhBFZ7vg7kh8gp3mXRnQoabM3tcXCQa
AhCyMIq189LOwRsx7XBdIsKwb6p+JzlqK/KODhKnZIudMW8qh6KxD2dkfQgs
5ZYuPuuMs1rBnMYJPE8ghs4kobgZSzln7PFmf8r23Ceg2IEfyN1yq6RzQ0xX
ZpSHrXi33Q0B8lt/k+hb4VIUkfbMm8gQveQLUwuOaKdGZB+RAd8TDQ+hrcdK
drgtnNPDUsin3YPDMEGgH25ICRUYQ9iBFhVhVgwFK3bIZ0gHhbQC6kdkEsiQ
eD7qntXczCFpNCIdN5vcSoHJrLKNZ6RRior/DXy70C1/TcEJgSn3G3EorLmm
7rnlVebnnMJ37JvHVtBwQFwPwQUpQnJcWlo5NtCZdKzCQCha86mAIHFymjag
X8cyhjt9Ov0nevUKoISzPeHlYC2mIEZBYu/LpqETcqNftvUvfhMNgZcgTbDG
/EbCGE68d+yJuhlMRr8tQQsCGkOTK6V10e2w28nO41R+fJPkD7LKhAwaicQv
5QrGeQgNa0eKgwj7GdglGKQ8MR0A4OpueSkymRU0esn37XTNlGQpesE6N3XI
c71zdmHLgv/MuZE2ZyWnX9V4i2t3Iq7db+LasUa8itArsld0+13hORVkhgIL
T9HZkk0aEHbqCphe8jwu9PaA+3jHjhH/0ceHvioCmiOaZwgPWOgWC4m7Qosj
xeJe0xzTfp8UJ/Y4MQAseIdSCIX8Pplw9JAmUlXVdD1vs8b1gIjOq4Zi4jPd
PcOZAuGpOoDzbBbTFuoiy71ciLQnSc4dlmLnXDi0itx7MQ2E2f5JSo7uD44s
KSPx4L7cUSNWxu+ESF+ThASXmv4NmcpDGkzveNQ+w86JJtjYIeomv9ia+e6R
T6aK8daiIgJfin1lhyO3nUcNFAohFVoGgZZyJUmpvWlI33Z7nsRF7Xwwltyi
TRYUQ6Y5OnakWRxb7vKlF9HsuABBcJJiza+QSw80T2hfoGs+bfMJL7EJowsK
oJzeXikH9Dk5s4wXP3EvVbzpZuR5/MaNQ+jOY/zg2MKXZFabIiYBEFeNJF70
8Yx/90Nt0JVGID2JD+cHAXNT4L4ZjgnZBYorENOmwBrDOHYU5aa0CpVh0kJo
P+fK62zkl8RNClc9n3YP4tVthPJpuWxTy+29W9FTE1fH1uHKvzXf2cHeXbE1
RuMCdYoURMrIkGZe6q8cU/MBC76zgfhV9sPQcDhAeuSkjKKbkdhrsjgLJ80M
eokJ4UANQnGiXXIqLZWoZEcbpZC6SMgHq1FD0luAWojomwYoSNgGM3Hx/oVs
Jil6PlCYJnpOX7KUsb0t3tgVHRhNljrVDl6YJEtaQIaDLpAegJkk6g8tY3GX
kd7/5HqHE0KSRO6aKZeh+yNcgRZdu+6xbE4xYw1CPOr39DF6C3rbMYye6j96
0iu6suHQhy6dcLVC/1xOn4Zw3Z5e1BO8K1R3sNkm3DKDe65ELzm98abKrpP0
dnbjTB2UmLmgcKNnZzveOb0CTu1Sp1Ll44IuZFlvESPwODk7ufUi/lD9cO1x
LrVdKjZucQplVd55YaI38Tjqbc48bh1Qop8JOUmRuMnd9FIuPTH9W/lWsesi
tLpz+t+3rgkowf2BVUI42+i1FCeeOT2U+6qW5IsCFkI6c82JSsY2hEZqyI1e
aRTvcwzp0yBr3BpN9gD96Rx7oHUVGRAxhgvJiqoOwR7jwkJiV48hneIXJwy0
252HcxAUyhsxWUWwMpULlsjpnWoXIAMB91ckU5GlmT0vaYdqwkCX14hQbl1a
K1XUn5FGff3tE9z5Ze5zTs09OLIXmirFDbbLHb07ENFI7BoPPcRsffQXu69n
Pu69Pn/x84szezDe3xt3L/oam79uXDuHjp7uxXPhdrm7/u7P1j7Hl8BpF9HW
m+nCRXMnGxcWRNaCEpQAx3xIuU+34JSeN4XmdxrzuGlQr5FDH9NNG8NJXw+3
GvCx3pjqb6/51K4Mobzbd3GrqSQeiWZaanTIx6Ou8aqN2KDVxpG3mlCIBumN
MP3eiPYknJRnozx2C/ndeEANvmnLZN0CWnRLt5V1hsFECjOlQhjOjm3fgig3
2Cje7n2SidHh6Ki/4bLNHak8+P8ulQfD/c+fPx9+RTIjvdobGTrTonYN9XSq
pgRq3QzJTZotoqLCpd0iEjjLiZAonabXW8QVyX5LVchQkvPJReTQWiW1JPjY
pjd/pxc/ppe29CAQfu8reTkTa9jW5O4azkGojQqZCLrY0R+2/QUzeyilFu0t
AJ4bBuAtL5MEIipU25rF2pxlOCXq2x7UtqdDUixtUipEXlm/zD0OF/ZIlBQK
U50zMl8DG9PtE2au/L+px94ehUNblYNCjxOKRojtU4pu1mWjN+1NS3kjw0Gn
CBSzI7GtxwgatB0n43jID1c2Y23cEsP3+hU/4ToROXXHYaAmQ34yHSraK7vm
iZha9a7k1F5gJK5kK5HjAdxKmwut5imnE+T93NExdx/b9mHlwE/2Qw8XDtW/
CC0nMP+IsXA0CZUVLm3zPYYkMk7DMG1q2D04sE9fnJ6bCWJZrkX6eCkouYp6
w9H+w5sblfLQeioS0HktRSID2syD8R5NOgjvUn+re+BqUPj9Mcljb0cH43BH
j+nNyhUSpSeJp3K/CIH05+FBBwTlMFIH6g4/cBfO+GZMPxv6txU6cgC3Ubdh
czek/+CYVn1bkuWyUzHOwe3qHOFpTdvTjUNS7WGG/vEq2oGDY56K/08Weh15
3YZfjPifklnW68oOPdJyxNPcH4wHO11r2eu31BTuADwasJnWM1U0a2y9536k
zVYDfUuv0SBcZcIYGC59+zOWQolXYWvvYGbYUeEVDyLCbg/sQMM7VfZ730l7
iNbcWl0fav1Yz8iVZN3rWGY3LfJxfxPf/vvp3gELjSZsY6aJK5H9ZoCSsK9s
+BJnDshlW3yO+BcXBUIpk4oGy2WzehsNiKvcHJelABP+L7HULkDBYwAA

-->

</rfc>

