<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2308 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY RFC2317 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2317.xml">
<!ENTITY RFC3597 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3597.xml">
<!ENTITY RFC4033 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-woodworth-bulk-rr-07" category="std" updates="2308, 4033, 4034, 4035">

  <front>
    <title abbrev="BULK RR">BULK DNS Resource Records</title>

    <author initials="J." surname="Woodworth" fullname="John Woodworth">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>4250 N Fairfax Dr</street>
          <city>Arlington</city>
          <code>VA 22203</code>
          <country>USA</country>
        </postal>
        <email>John.Woodworth@CenturyLink.com</email>
      </address>
    </author>
    <author initials="D." surname="Ballew" fullname="Dean Ballew">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Dean.Ballew@CenturyLink.com</email>
      </address>
    </author>
    <author initials="S." surname="Bindinganaveli Raghavan" fullname="Shashwath Bindinganaveli Raghavan">
      <organization>Hughes Network Systems</organization>
      <address>
        <postal>
          <street>11717 Exploration Lane</street>
          <city>Germantown</city>
          <code>MD 20876</code>
          <country>USA</country>
        </postal>
        <email>shashwath.bindinganaveliraghavan@hughes.com</email>
      </address>
    </author>
    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>

    <date year="2017"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The BULK DNS resource record type defines a method of pattern-based
creation of DNS resource records based on numeric substrings of query
names.  The intent of BULK is to simplify generic assignments in a
memory-efficient way that can be easily shared between the primary and
secondary nameservers for a zone.</t>



    </abstract>


    <note title="Ed note">


<t>Text inside square brackets ([]) is additional background
information, answers to frequently asked questions, general musings,
etc.  They will be removed before publication.  This document is being
collaborated on in GitHub at
&lt;https://github.com/vttale/bulk-rr&gt;.  The most recent
version of the document, open issues, etc should all be available
here.  The authors gratefully accept pull requests.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The BULK DNS resource record defines a pattern-based method for
on-the-fly resource record generation.  It is essentially an enhanced
wildcard mechanism, constraining generated resource record owner names
to those that match a pattern of variable numeric substrings.  It is
also akin to the $GENERATE master file directive <xref target="bind-arm"/> without
being limited to numeric values and without creating all possible
records in the zone data.</t>

<t>For example, consider the following record:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK A (
                      pool-A-[0-255]-[0-255].example.com.
                      10.55.${1}.${2}
                   )
]]></artwork></figure>

<t>It will answer requests for pool-A-0-0.example.com through
pool-A-255-255.example.com with the IPv4 addresses 10.55.0.0 through
10.55.255.255.</t>

<t>Much larger record sets can be defined while minimizing the associated
requirements for server memory and zone transfer network bandwidth.</t>

<t>DNSSEC support is also described.  The Numeric Pattern Normalization
(NPN) resource record provides a way of generating pattern-based
DNSSEC signatures, and securely performing DNSSEC validation on such
signatures.</t>

<section anchor="background-and-terminology" title="Background and Terminology">

<t>The reader is assumed to be familiar with the basic DNS and DNSSEC
concepts described in <xref target="RFC1034"/>, <xref target="RFC1035"/>, <xref target="RFC4033"/>,
<xref target="RFC4034"/>, and <xref target="RFC4035"/>; subsequent RFCs that update them in
<xref target="RFC2181"/> and <xref target="RFC2308"/>; and DNS terms in <xref target="RFC7719"/>.</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
<xref target="RFC2119"/> when, and only when, they appear in all capitals, as shown
here.</t>

</section>
</section>
<section anchor="the-bulk-resource-record" title="The BULK Resource Record">

<t>The BULK resource record enables an authoritative nameserver to
generate RRs for other types based upon the query received.</t>

<t>The Type value for the BULK RR type is TBD.</t>

<t>The BULK RR is class-independent.</t>

<section anchor="bulk-rdata-wire-format" title="BULK RDATA Wire Format">

<t>The RDATA for a BULK RR is as follows:</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       Domain Name Pattern     /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                                                               /
/                      Replacement Pattern                      /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Match Type identifies the type of the RRset to be generated by this
BULK record.  It is two octets corresponding to an RR TYPE code as
specified in <xref target="RFC1035"/>, Section 3.2.1.</t>

<t>Domain Name Pattern consists of a pattern encoded as a wire-format
fully qualified domain name.  The full name is used so that numeric
substrings above the zone cut can be captured in addition to those in
the zone.  It needs no length indicator for the entire field because
the root label marks its end.</t>

<t>Special characters are interpreted as per the following Augmented
Backus-Naur Form (ABNF) notation from <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
match         =  1*(range / string)

range         =  "[" [decnum "-" decnum] "]" /
                  "<" [hexnum "-" hexnum] ">"
                      ; create references for substitution
                      ; limit of 32 references
                      ; [] is syntactic sugar for 0-255
                      ; <> is syntactic sugar for 00-ff

string        =  1*(ctext / quoted-char)

decnum        =  1*decdigit
                      ; constrained to 65535 maximum.

hexnum        =  1*hexdigit
                      ; constrained to ffff maximum.

octet         =  %x00-FF

decdigit      =  %x30-39
                      ; 0-9
hexdigit      =  decdigit / 0x41-0x46 / 0x61-66
                      ; 0-9, A-F, a-f

ctext         =  <any octet excepting "\">

quoted-char   = "\" octet
                       ; to allow special characters as literals
]]></artwork></figure>

<t>Interpretation of the Domain Name Pattern is described in detail in
the "BULK Replacement" section.</t>

<t>The limit of 32 references is meant to simplify implementation
details.  It is largely but not entirely arbitrary, as it could
capture every individual character of the text representation of a
full IPv6 address.</t>

<t>Replacement Pattern describes how the answer RRset MUST be generated
for the matching query.  It needs no length indicator because its end
can be derived from the RDATA length minus Match Type and Domain Name
Pattern lengths.  It uses the following additional ABNF elements:</t>

<figure><artwork><![CDATA[
replace       =   1*(reference / string)

reference     =   "$" "{" (positions / "*") [options] "}"

positions     =   (position / posrange) 0*("," (position / posrange))

posrange      =   position "-" position

position      =   1*decnum

options       =   delimiter [interval [padding]]

delimiter     =   "|" 0*(ctext | quoted-char)
                        ; "\|" to use "|" as delimiter
                        ; "\\" to use "\" as delimiter

interval      =   "|" *2decdigit

padding       =   "|" *2decdigit

]]></artwork></figure>

<t>[ Is this complexity beyond simple ${1}, ${2}, etc, really worth
it?  I definitely see how it could make for shorter replacement
patterns, but does it enhance their clarity and usability? ]</t>

<t>The Replacement Pattern MUST end in a period if it is intended to
represent a fully qualified domain name.</t>

</section>
<section anchor="the-bulk-rr-presentation-format" title="The BULK RR Presentation Format">

<t>Match Type is represented as an RR type mnemonic or with <xref target="RFC3597"/>'s
generic TYPE mechanism.</t>

<t>Domain Name Pattern is represented as a fully qualified domain name as
per <xref target="RFC1035"/> Section 5.1 rules for encoding whitespace and
other special characters.</t>

<t>Replacement Pattern is represented by the standard &lt;character-string&gt;
text rules for master files as per <xref target="RFC1035"/> section 5.1.</t>

<t>It is suggested that lines longer than 80 characters be wrapped with
parenthetical line continuation, per <xref target="RFC1035"/> Section 5.1, starting
after Match Type and ending after Replacement Pattern.</t>

</section>
</section>
<section anchor="bulk-replacement" title="BULK Replacement">

<t>When a BULK-aware authoritative nameserver receives a query for which
it does not have a matching name or a covering wildcard, it MUST then
look for BULK RRs at the zone apex, selecting all BULK RRs with a
Match Type that matches the query type and a Domain Name Pattern that
matches the query name.  Note that query type ANY will select all
Match Types, and all query types match a CNAME or DNAME Match Type.
One or more answer RRs will be generated per the replacement rules
below.  Examples are provided in an appendix.</t>

<t>By only triggering the BULK algorithm when the query name does not
exist, administrators are given the flexibility to explicitly override
the behaviour of specific names that would otherwise match the BULK
record's Domain Name Pattern.  This is unlike BIND's $GENERATE
directive, which adds the generated RRs to any existing names.</t>

<section anchor="matching-the-domain-name-pattern" title="Matching the Domain Name Pattern">

<t>A query name matches the Domain Name Pattern if the characters that
appear outside the numeric ranges match exactly and those within
numeric ranges have values that fall within the range.  Numeric
matches MUST be of the appropriate decimal or hexadecimal type as
specified by the delimiters in the pattern.  For example, if a range
is given as [0-255], then FF does not match even though its value as
a hexadecimal number is within the range.  Leading zeros in the
numeric part(s) of the qname MUST be ignored; for example,
001.example.com, 01.example.com and 1.example.com would all match
[].example.com.</t>

<t>When a query name matches a Domain Name Pattern, the value in each
numeric range is stored for use by the Replacement Pattern, with
reference numbers starting at 1 and counting from the left.  For
example, matching the query name host-24-156 against
host-[0-255]-[0-255] assigns 24 to ${1} and 156 to ${2}.</t>

</section>
<section anchor="record-generation-using-replacement-pattern" title="Record Generation using Replacement Pattern">

<t>The Replacement Pattern generates the record data by replacing the
${&#8230;} references with data captured from the query name, and copying
all other characters literally.</t>

<t>The simplest form of reference uses only the reference number between
the braces, "{" and "}".  The value of the reference is simply
copied directly from the matching position of the query name.</t>

<t>The next form of reference notation uses the asterisk, "*".  With
${*}, all captured values in order of ascending position, delimited by
its default delimiter (described below), are placed in the answer.</t>

<t>Numeric range references, such as ${1-4}, replaces all values captured
by those references, in order, delimited by the default delimiter
described below.  To reverse the order in which they are copied,
reverse the upper and lower values, such as ${4-1}.  This is useful
for generating PTR records from query names in which the address is
encoded in network order.</t>

<t>Similar to range references, separating positions by commas creates
sets for replacement. For example, ${1,4} would be replaced by the
first and fourth captured values, delimited its default delimiter.
This notation may be combined with the numeric range form, such as 
${3,2,1,8-4}.</t>

<section anchor="delimiters" title="Delimiters">

<t>A reference can specify a delimiter to use by following a vertical
bar, "|", with zero or more characters.  Zero characters, such as in
${1-3|}, means no delimiter is used, while other characters up to an
unescaped vertical bar or closing brace are copied between position
values in the replacement.  The default delimiter is the hyphen, "-".</t>

</section>
<section anchor="delimiter-intervals" title="Delimiter intervals">

<t>A second vertical bar in the reference options introduces a delimiter
interval.  The default behavior of a multi-position reference is to
combine each captured value specified with a delimiter between each.
With a delimiter interval the delimiters are only added between every
Nth value.  For example, ${*|-|4} adds a hyphen between every group of
four captured positions.  This can be a handy feature in the IPv6
reverse namespace where every nibble is captured as a separate value
and generated hostnames include sets of 4 nibbles.  An empty or 0
value for the delimiter interval MUST be interpreted as the default
value of 1.</t>

</section>
<section anchor="padding-length" title="Padding length">

<t>The fourth and final reference option determines the field width of
the copied value.  Shorter values MUST be padded with leading zeroes
("0") and longer values MUST be truncated to the width.</t>

<t>The default behavior, and that of an explicit empty padding length, is
that the captured query name substring is copied exactly.  A width of
zero "0" is a signal to "unpad", and any leading zeros MUST be
removed. [ Unnecessary complexity? ]</t>

<t>If a delimiter interval greater than 1 is used, captured values
between the intervals will be concatenated and the padding or
unpadding applied as a unit and not individually.  An example of this
would be ${*||4|4} which would combine each range of 4 captured values
and pad or truncate them to a width of 4 characters.</t>

<t>[ If this is kept, the element/feature should probably be renamed
from "padding" since it is just as likely to truncate. ]</t>

</section>
<section anchor="final-processing" title="Final processing">

<t>The string that results from all replacements is converted to the
appropriate RDATA format for the record type.  If the conversion
fails, the SERVFAIL rcode MUST be set on the response.  [ This would
cause a resolver to try another auth for the name, which presumably is
just going to fail too.  Should it NXDOMAIN instead to stop the
resolver? That might have implications for aggressive subtree denial
though. Extended error could be useful here. ]</t>

<t>The TTL of each RR generated by a BULK RR is the TTL of the
corresponding BULK record itself.  [ BULK should probably have its
own TTL field because using that of the record itself feels like bad
design.  On the other hand, if BULK is never meant to be queried for
directly and only appears in authoritative data, its own TTL is pretty
useless normally. ]</t>

<t>If the generated record type is one that uses domain names in its
resource record data, such as CNAME, a relative domain names MUST be
fully qualified with the origin domain of the BULK RR.</t>

</section>
</section>
</section>
<section anchor="known-limitations" title="Known Limitations">

<t>This section defines known limitations of the BULK resource type.</t>

<section anchor="unsupported-nameservers" title="Unsupported Nameservers">

<t>Authoritative nameservers that do not understand the semantics of the
new record type will not be able to deliver the intended answers even
when the type appears in their zone data This significantly affects
the interoperability of primary versus secondary authorities that are
not all running the same software.  Adding new RRs which affect
handling by authoritative servers, or being unable to add them, is an
issue that needs to be explored more thoroughly within dnsop.</t>

<t>On the resolver side, rolling out a new semantics in DNSSEC has also
proven to be difficult in the past.  Lacking NPN support effectively
means that operators using BULK will have to forego DNSSEC signing of
the affected zones, or do online signing of the dynamically generated
records.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Two known security considerations exist for the BULK resource record,
DNSSEC and DDOS attack vectors.</t>

<section anchor="dnssec-signature-strategies" title="DNSSEC Signature Strategies">

<t>DNSSEC was designed to provide validation for DNS resource records,
requiring each tuple of owner, class, and type to have its own
signature.  This essentially defeats the purpose of providing large
generated blocks of RRs in a single RR as each generated RR would
require its own legitimate RRSIG record.</t>

<t>In the following sections several options are discussed to address
this issue.  Of the options, on-the-fly provides the most secure
solution and NPN provides the most flexible.</t>

<section anchor="on-the-fly-signatures" title="On-the-fly Signatures">

<t>A significant design goal of DNSSEC was to be able to do offline
cryptographic signing of zone contents, keeping the key material more
secure.</t>

<t>On-the-fly processing requires authoritative nameservers to sign
generated records as they are created.  Not all authoritative
nameserver implementations offer on-the-fly signatures, and even with
those that do not all operators will want to keep signing keys online.
This solution would either require all implementations to support
on-the-fly signing or be ignored by implementations which can not or
will not comply.</t>

<t>One possibly mitigation for addressing the risk of keeping the zone
signing key online would be to continue to keep the key for signing
positive answers offline and introduce a second key for online signing
of negative answers.</t>

<t>No changes to validating resolvers is required to support this
solution.</t>

</section>
<section anchor="normalized-npn-based-signatures" title="Normalized (NPN-Based) Signatures">

<t>This solution provides the most flexible solution as nameservers
without on-the-fly signing capabilities can still support signatures
for BULK records.  The down side to this solution is it requires
additional DNSSEC-aware resolver support.</t>

<t>It has been pointed out that due to this limitation, creation of
DNSSEC-signed BULK RRs requiring NPN support SHOULD be formally
discouraged until such time a respectable percentage (&gt;80%) of
validating resolvers in-the-wild possess NPN processing capabilities.
Until that time, on-the-fly signing and unsigned records offer the
intended capabilities of the BULK specification, while requiring zero
new features to support RR resolution. The authors would like to
encourage opening this door for pattern based technologies such as NPN
records as a solution to BULK RRs as well as other pattern based RRs
to come. Given enough time, enough nameservers will be patched and
upgraded for unrelated reasons and by means of simple attrition can
supply a level of inertia and eventually widespread adoption can be
assumed.</t>

<t>NPN records are likely to be a topic of great debate as to their own
security limitations.  It is, however, the authors' belief that while
any logic which limits the input of digital signatures lessens the
validity of those signatures, the limitation is minimal and the gain
is significant.  The main reason for this is as a general rule, RRs
used in a generic manner such as conventional $GENERATE RRs or
scripted mass pattern generated RRs have a lesser importance than
other RRs in managed zones.  These therefore inherently pose less risk
by means of attack and have a much less reward by defeating security
measures.</t>

<t>This being said, care must still be taken to set the Ignore fields
appropriately to minimize exposure and only use NPN RRs to secure
pattern-based records such as BULK.</t>

</section>
<section anchor="non-dnssec-zone-support-only" title="Non-DNSSEC Zone Support Only">

<t>As a final option zones which wish to remain entirely without DNSSEC
support may serve such zones without either of the above solutions and
records generated based on BULK RRs will require zero support from
recursive (resolving) nameservers.</t>

</section>
</section>
<section anchor="dnssec-validator-details" title="DNSSEC Validator Details">

<t>Verification of DNSSEC signed BULK generated RRs may be performed
against on-the-fly signatures with zero modification to their
behavior.  However, verification using NPN records would require
changes to the logic to incorporate processing RDATA generated by BULK
logic as described above so the results will be compatible.</t>

</section>
<section anchor="ddos-attack-vectors-and-mitigation" title="DDOS Attack Vectors and Mitigation">

<t>As an additional defense against Distributed Denial Of Service (DDOS)
attacks against recursive (resolving) nameservers it is highly
recommended shorter TTLs be used for BULK RRs than others.  While
disabling caching with a zero TTL is not recommended, as this would
only result in a shift of the attack target, a balance will need to be
found.  While this document uses 24 hours (86400 seconds) in its
examples, values between 300 to 900 seconds are likely more
appropriate and is RECOMMENDED.  What is ultimately deemed appropriate
may differ from zone to zone and administrator to administrator.</t>

<t>[ I am unclear how this helps DDOS mitigation against anyone at all. ]</t>

</section>
<section anchor="implications-of-large-scale-dns-records" title="Implications of Large-Scale DNS Records">

<t>The production of such large-scale records in the wild may have some
unintended side-effects.  These side-effects could be of concern or
add unexpected complications to DNS based security offerings or
forensic and anti-spam measures.  While outside the scope of this
document, implementers of technology relying on DNS resource records
for critical decision making must take into consideration how the
existence of such a volume of records might impact their technology.</t>

<t>Solutions to the magnitude problem for BULK generated RRs are expected
be similar if not identical to that of existing wildcard records, the
core difference being the resultant RDATA will be unique for each
requested Domain Name within its scope.</t>

<t>The authors of this document are confident that by careful
consideration, negative_side-effects produced by implementing the
features described in this document can be eliminated from any such
service or product.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>Neither the BULK nor NPN records introduce any new privacy concerns to
DNS data.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>IANA is requested to assign numbers for two DNS resource record types
identified in this document: BULK and NPN.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This document was created as an extension to the DNS
infrastructure. As such, many people over the years have contributed
to its creation and the authors are appreciative to each of them even
if not thanked or identified individually.</t>

<t>A special thanks is extended for the kindness, wisdom and technical
advice of Robert Whelton (CenturyLink, Inc.) and Gary O'Brien
(Secure64 Software Corp).</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1034;
&RFC1035;
&RFC2119;
&RFC2181;
&RFC2308;
&RFC2317;
&RFC3597;
&RFC4033;
&RFC4034;
&RFC4035;
&RFC5234;


    </references>

    <references title='Informative References'>

&RFC7719;
<reference anchor="bind-arm" target="https://ftp.isc.org/isc/bind9/cur/9.9/doc/arm/Bv9ARM.html">
  <front>
    <title>BIND 9 Configuration Reference</title>
    <author >
      <organization>Internet Systems Consortium</organization>
    </author>
    <date year="2016"/>
  </front>
</reference>


    </references>


<section anchor="bulk-examples" title="BULK Examples">

<section anchor="example-1" title="Example 1">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${4-1}.example.com.
        )
]]></artwork></figure>

<t>A query received for the PTR of 4.3.2.10.in-addr.arpa will create the
references ${1} through ${4} with the first four labels of the query
name.  The ${4-1} reference in the replacement pattern will then
substitute them in reverse with the default delimiter of hyphen
between every character and no special field width modifications.  The
TTL of the BULK RR is used for the generated record, making the
response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-10-2-3-4.example.com.
]]></artwork></figure>

</section>
<section anchor="example-2" title="Example 2">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${2,1|||3}.example.com.
        )
]]></artwork></figure>

<t>Example 2 is similar to Example 1, except that it modifies the
replacement pattern.  The empty option after the first
vertical bar causes no delimiters to be inserted, while the second
empty option that would keep the delimiter interval as 1.  The latter
is relevant because the final value, padding of 3, is applied over
each delimiter interval even when no delimiter is used.  Not all
captures from the substring are required to be used in the response.</t>

<t>The result is that a query for the PTR of 4.3.2.10.in-addr.arpa
generates this response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-003004.example.com.
]]></artwork></figure>

<t>[ Admittedly you can't do this very effectively without the field
width complexity. Is this sort of name common?  Does it need support?
Admittedly $GENERATE had the feature, but is that reason enough? ]</t>

<t>[ Change this to a hex matching example? ]</t>

</section>
<section anchor="example-3" title="Example 3">

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.". RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@    7200 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
0-3 86400 IN NS ns1.sub.example.com.
]]></artwork></figure>

<t>A query for the PTR of 25.2.2.10.in-addr.arpa is received and the BULK
record with the CNAME Match Type matches all query types.  25 and 2
are captured as references, and joined in the answer by the period
(".") character as a delimiter, with ".0-3" then appended literally
and fully qualified by the origin domain.  The final synthesized
record is:</t>

<figure><artwork><![CDATA[
25.2.2.10.in-addr.arpa 7200 IN CNAME 25.2.0-3.2.10.in-addr.arpa.
]]></artwork></figure>

<t>[ Without $* and options complexity, the pattern to get the same
result is just ${1}.{$2}.0-3 which is not really significantly onerous
to enter, and slightly less arcane looking to comprehend. ]</t>

</section>
</section>
<section anchor="npn-examples" title="NPN Examples">

<section anchor="example-1-1" title="EXAMPLE 1">

<figure><artwork><![CDATA[
2.10.in-addr.arpa. 86400 IN BULK PTR (
                                 [0-255].[0-10].2.10.in-addr.arpa.
                                 pool-A-${1}-${2}.example.com.
                            )
2.10.in-addr.arpa. 86400 IN NPN  PTR 9 0 7 13
]]></artwork></figure>

<t>A query for the PTR of address 10.2.3.44 would match As shown
previously in BULK RR examples the query would match the BULK record
for the query name 44.3.2.10.in-addr.arpa, generating a PTR to
pool-A-3-44.example.com as the answer.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "3-44" as illustrated below.</t>

<figure><artwork><![CDATA[
  0 1 2 3 4 5 6 7
                v---------
    p o o l - A - 3 - 4 4 . e x a m p l e . c o m .
                 ---------^
                          1 1 1 1                  
                          3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "3-44" will remain intact, as will
everything to its right.  The remaining characters will be processed
for digits between 0 and 9 as indicated by the NPN record's
hexadecimal flag 9, and each run of digits replaced by the single character
"9".  The final Normalized RDATA for *.2.10.in-addr.arpa would
therefore become pool-A-9-9.example.com., and its signature would be
based on this value to cover all possible permutations of the
pool-A-${1}-${2}.example.com replacement pattern.</t>

<t>Since the validating nameserver would use the identical
NPN record for processing and comparison, all RRs generated by the
BULK record can now be verified with a single signature.</t>

</section>
<section anchor="example-2-1" title="EXAMPLE 2">

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
    86400 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
    86400 IN NPN  CNAME 9 0 0 23
]]></artwork></figure>

<t>For this example, a query of "10.2.2.65" would enter the nameserver as
"65.2.2.10.in-addr.arpa." and a "CNAME" RR with the RDATA of
"65.2.0-3.2.10.in-addr.arpa." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "65.2" as illustrated below.</t>

<figure><artwork><![CDATA[
       0
       v---------
         6 5 . 2 . 0 - 3 . 2 . 1 0 . i n - a d d r . a r p a .
        ---------^
                 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
                 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "65.2" will remain intact as will everything
to its right.  The remaining characters will be processed for digits
from 0 through 9 as indicated by the NPN record's hexadecimal flag
"9", with each run replaced by the single character "9".  The final
normalized RDATA would therefore become 9.9.0-3.2.10.in-addr.arpa
and its signature would be based on this normalized RDATA field.
This new normalized string would be used as an RDATA for the
wildcard label of 2.10.in-addr.arpa now encompassing all
possible permutations of the ${*|.}.0-3.2.10.in-addr.arpa. pattern.</t>

<t>As in example 1, the validatating resolver would use the same NPN
record for comparison.</t>

</section>
<section anchor="example-3-1" title="EXAMPLE 3">

<t>This example provides reverse logic for example 1 by providing an IPv4
address record for a requested hostname.  For this example the query is
defined as an A record for pool-A-3-44.example.com, with an origin
of example.com.  RRs for this example are defined as:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK A (
                                   pool-A-[0-10]-[0-255]
                                   10.2.${*}
                                  )
example.com. 86400 IN NPN  A 9 0 8 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "003.044" as illustrated below.</t>

<figure><artwork><![CDATA[
                0 1 2 3 4 5 6 7 8
                                v--------------
                  0 1 0 . 0 0 2 . 0 0 3 . 0 4 4
                                 ---------------^
                                                0
]]></artwork></figure>

<t>This example illustrates a key point about NPN records; since they are
pre-canonical they MUST operate on a strict subset of WIRE formatted
data.  For A and AAAA records this means the "Ignore" fields are based
on zero padded data.  In this example our generated record MUST be
converted into "010.002.003.044" (shown above) prior to processing.
After processing, wire format would become "0x0A02032C" (shown in
hexadecimal).  This format would be too imprecise for normalization so
padded decimal is used.</t>

<t>Everything to the left of "003.044" will remain intact as will
everything to its right.  The remaining characters will be processed
for digits between 0 and 9 as indicated by the NPN record's
hexadecimal flag "9" and each run replaced by the single character
"9".  The final Normalized RDATA would therefore become 10.2.9.9 and
its signature would be based on this normalized RDATA field. This
new normalized A RR would be used as an RDATA for the wildcard
label of "*.example.com." now encompassing all possible permutations
of the 10.2.${*} pattern.</t>

</section>
<section anchor="example-4" title="EXAMPLE 4">

<t>This example provides similar logic for an IPv6 AAAA record.  For this
example the query is defined as an AAAA record for
pool-A-ff-aa.example.com with an origin of example.com..  RRs for this
example are defined as:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK AAAA (
                                   pool-A-[0-ffff]-[0-ffff]
                                   fc00::${1}:${2}
                                )
example.com. 86400 IN NPN  AAAA X 0 30 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "00ff:00aa" as illustrated below.</t>

<figure><artwork><![CDATA[
                      1 1 1 1 1 1 1 1 1 1 2 2
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

    f c 0 0 : 0 0 0 0 : 0 0 0 0 : 0 0 0 0 : -/-/

  4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1
  0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9
   /-/-/- . . . . . . . . . . . . . . . . . . . . . . . . -/-/-/
                          2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4
                          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
                                            v------------------
                     /-/- 0 0 0 0 : 0 0 0 0 : 0 0 f f : 0 0 a a
                                             -------------------^
                        2 1 1 1 1 1 1 1 1 1 1 
                        0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example reinforces the point on pre-canonical processing of NPN
records; they MUST operate on a strict subset of WIRE formatted
data. For A and AAAA records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "fc00:0000:0000:0000:0000:0000:00ff:00aa" (shown
above) prior to processing.  After processing, wire format would
become "0xFC000000000000000000000000FF00AA" (shown in
hexadecimal). This format is slightly misleading as it is truly only
16 bytes of WIRE data and would be too imprecise for normalization so
padded hexadecimal is used.</t>

<t>Everything to the left of "00ff:00aa" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "f" as indicated by the NPN record's
hexadecimal flag "X" and each run replaced by the single character
"f".  The final Normalized RDATA would therefore become "fc00::f:f"
and its signature would be based on this "normalized" RDATA
field. This new "normalized" "AAAA" RR would be used as an RDATA for
the wildcard label of *.example.com now encompassing all possible
permutations of the "fc00::${1}:${2}" pattern.</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

